-- Enable UUID extension if needed
create extension if not exists "uuid-ossp";

-- Posts table
create table if not exists public.posts (
  id bigint generated by default as identity primary key,
  title text not null,
  content text not null,
  image_url text,
  author_id uuid references auth.users(id) on delete set null,
  author_name text not null default 'Anon',
  created_at timestamp with time zone not null default now()
);

-- Comments
create table if not exists public.comments (
  id bigint generated by default as identity primary key,
  post_id bigint not null references public.posts(id) on delete cascade,
  author_id uuid references auth.users(id) on delete set null,
  author_name text not null default 'Anon',
  content text not null,
  created_at timestamp with time zone not null default now()
);
create index if not exists comments_post_id_idx on public.comments(post_id);

-- Reactions
create type if not exists reaction_type as enum ('LIKE','LOVE','LAUGH','WOW');
create table if not exists public.reactions (
  id bigint generated by default as identity primary key,
  post_id bigint not null references public.posts(id) on delete cascade,
  type reaction_type not null,
  created_at timestamp with time zone not null default now()
);
create index if not exists reactions_post_id_idx on public.reactions(post_id);

-- RLS
alter table public.posts enable row level security;
alter table public.comments enable row level security;
alter table public.reactions enable row level security;

-- Policies: read all
create policy if not exists posts_read on public.posts for select using (true);
create policy if not exists comments_read on public.comments for select using (true);
create policy if not exists reactions_read on public.reactions for select using (true);

-- Policies: insert by authed users
create policy if not exists posts_insert on public.posts for insert with check (auth.role() = 'authenticated');
create policy if not exists comments_insert on public.comments for insert with check (auth.role() = 'authenticated');
create policy if not exists reactions_insert on public.reactions for insert with check (auth.role() = 'authenticated'); 

-- Profiles
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  username text unique not null,
  created_at timestamp with time zone not null default now()
);

alter table public.profiles enable row level security;

-- Anyone can read profiles
create policy if not exists profiles_read on public.profiles for select using (true);

-- Only the user can insert their own profile
create policy if not exists profiles_insert on public.profiles for insert with check (auth.uid() = id);

-- Only the user can update their own profile
create policy if not exists profiles_update on public.profiles for update using (auth.uid() = id); 

-- Reactions: ensure one reaction per user per type per post
alter table public.reactions
  add column if not exists reactor_id uuid references auth.users(id) on delete cascade;

-- Unique constraint for (post_id, reactor_id, type)
do $$ begin
  if not exists (
    select 1 from pg_constraint
    where conname = 'reactions_post_user_type_key'
  ) then
    alter table public.reactions
      add constraint reactions_post_user_type_key unique (post_id, reactor_id, type);
  end if;
end$$;

-- Optional RLS (if not using service role for inserts)
drop policy if exists reactions_insert on public.reactions;
create policy reactions_insert on public.reactions
  for insert
  to authenticated
  with check (reactor_id = auth.uid()); 