// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts       Account[]
  sessions       Session[]

  posts          Post[]
  comments       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailOTP {
  id         Int       @id @default(autoincrement())
  email      String
  codeHash   String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  consumedAt DateTime?

  @@index([email])
  @@index([expiresAt])
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  imageUrl    String?
  authorName  String     @default("Anon")
  authorId    String?
  author      User?      @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  reactions   Reaction[]

  @@index([authorId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  authorId   String?
  author     User?    @relation(fields: [authorId], references: [id])
  authorName String   @default("Anon")
  content    String
  createdAt  DateTime @default(now())

  @@index([postId])
  @@index([authorId])
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
}

model Reaction {
  id        Int          @id @default(autoincrement())
  postId    Int
  post      Post         @relation(fields: [postId], references: [id])
  type      ReactionType
  createdAt DateTime     @default(now())

  @@index([postId])
}
